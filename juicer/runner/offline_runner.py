import argparse
import gettext
import imp
import importlib
import json
import logging.config
import os
import sys

from termcolor import colored

import juicer.util.dataframe_util as du
import matplotlib
import yaml

# See https://stackoverflow.com/a/29172195/1646932
matplotlib.use('Agg', force=True)

logging.config.fileConfig('logging_config.ini')
locales_path = os.path.join('juicer', 'i18n', 'locales')
sys.path.append('/tmp')

DIST_ZIP_FILE = '/tmp/lemonade-lib-python.zip'
log = logging.getLogger(__name__)


def emit(*a, **kwargs):
    if kwargs.get('type') != 'HTML':
        print(colored(json.dumps(kwargs), 'cyan'))
    else:
        with open('/tmp/lemonade.html', 'a') as f:
            print(kwargs['message'], file=f)
        del kwargs['message']
        print(json.dumps(kwargs))


def run(spark, w_id, j_id, cache=None):
    importlib.reload(du)
    if cache is None:
        cache = {}
    m = importlib.import_module(f'juicer_app_{w_id}_{w_id}_{j_id}')

    t = gettext.translation('messages', locales_path, ['en'],
                            fallback=True)
    t.install()
    imp.reload(du)
    imp.reload(m)
    return m.main(spark, cache, emit)


def run_sk(w_id: int, j_id: int, cache: dict = None) -> None:
    """Execute code generated by Lemonade for Scikit-Learn platform

    Args:
        w_id (int): Workflow id
        j_id (int): Job id
        cache (dict, optional): Cached results. Defaults to None.
    """
    if cache is None:
        cache = {}
    m = importlib.import_module(
        'juicer_app_{w_id}_{w_id}_{j_id}'.format(w_id=w_id, j_id=j_id))

    t = gettext.translation('messages', locales_path, ['en'],
                            fallback=True)
    t.install()
    imp.reload(du)
    imp.reload(m)
    return m.main(None, cache, emit)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", help="Config file", required=True)
    parser.add_argument("-w", "--workflow_id", help="workflow_id",
                        required=True, type=int)
    parser.add_argument("-j", "--job_id", help="job_id", required=True,
                        type=int)
    args = parser.parse_args()

    with open(args.config) as config_file:
        juicer_config = yaml.load(config_file.read())

    app_configs = juicer_config['juicer']['spark']

    from pyspark.sql import SparkSession
    spark_builder = SparkSession.builder.appName('Helper')
    for option, value in app_configs.items():
        spark_builder = spark_builder.config(option, value)
    spark_session = spark_builder.getOrCreate()
    spark_session.sparkContext.addPyFile(DIST_ZIP_FILE)

    run(spark_session, args.workflow_id, args.job_id)
    raw_input('Press ENTER >')
