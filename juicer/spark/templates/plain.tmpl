#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Auto-generated PySpark code from Lemonade Workflow.
(c) Speed Labs - Departamento de Ciência da Computação
    Universidade Federal de Minas Gerais

 This code was generated by Lemonade(http://www.lemonade.org.br), 
 a tool for design data processing and machine learning workflows.
 Targeting platform is Apache Spark. In order to be able to run this code, you must:
 1. Install all dependencies for Lemonade;
 2. Configure connection parameters for Apache Spark and HDFS;
 3. Review the code and make any necessary adjust.
    
"""

# Not all imports are really necessary, remove them accordingly.\n",
from concurrent.futures import ThreadPoolExecutor
import collections
import datetime
import itertools
import json
import os
import re
import simplejson
import string
import sys
import time
import threading
import traceback
import unicodedata
import juicer.spark.ext as juicer_ext

from gettext import gettext as _
from textwrap import dedent
from timeit import default_timer as timer

from pyspark.ml import classification, evaluation, feature, tuning, clustering
from pyspark.ml.linalg import Vectors
from pyspark.sql import functions, types, Row, DataFrame
from pyspark.sql.utils import IllegalArgumentException
from pyspark.sql.window import Window
from pyspark.ml.linalg import Vectors, VectorUDT

from pyspark.ml import Pipeline
from pyspark.ml.classification import *
from pyspark.ml.clustering import *
from pyspark.ml.evaluation import *
from pyspark.ml.feature import *
from pyspark.ml.tuning import *
from pyspark.ml.recommendation import *
from pyspark.ml.regression import *
from pyspark.mllib.evaluation import *
from juicer import privaaas
from juicer.util import dataframe_util 
from juicer.spark.reports import *
from juicer.spark.ml_operation import ModelsEvaluationResultList

{%- autopep8 %}
{%- set list_imports = [] %}
{%- for instance in instances %}
{%- if instance.has_import and instance.has_import not in list_imports %}
{%- set _ = list_imports.append(instance.has_import) %}
{%- endif %}
{%- endfor %}
{%- for imps in list_imports %}
{{imps}}
{% endfor %}
{%- for imps in transpiler.imports %}
{{imps}}
{%- endfor %}

{%- if transpiler.custom_functions %}
{%- for code in transpiler.custom_functions.values() %}
{{code}}
{%- endfor -%}
{%- endif %}

def emit(df, n=20):
    """
    Print first n records from DataFrame
    """
    print(df.head(n))

def emit_schema(df):
    """
    Print a concise summary of a DataFrame.
    """
    df.info(verbose=True)

def main():
    """
    Generated code.
    """
{%- for instance in instances %}
{%-  handleinstance instance %}
{%- if instance.has_code and instance.enabled %}
{%- set task = instance.parameters.task %}
{%- set task_id = task.id %}

    # ---------------------------------------------------------------------------
    # {{task.operation.name}}
    # task_id = '{{task_id}}'
    # ---------------------------------------------------------------------------
{%- if task.forms.comment and task.forms.comment.value %}
{%- for comment in task.forms.comment and task.forms.comment.value.split('\n') %}
    # {{comment.replace('"', '')}}
{%- endfor %}
{%- endif %}
{%- if instance.set_plain(True) %}{% endif %}
{{instance.generate_code().strip()|indent(4, True)}}

{%- if instance.contains_results() %}

    {%- for out in instance.get_output_names(',').split(',') %}
    {%- if instance.has_code and instance.enabled %}
    {%- if instance.contains_sample %}
    emit({{out}})
    {%- endif%}
    {%- if instance.contains_schema %}
    emit_schema({{out}})
    {%- endif%}
    {%- endif%}
    {%- endfor %}

{%- endif %}


{%- endif %}
{%- endhandleinstance %}
{% endfor %}

if __name__ == '__main__':
    main()

{% endautopep8 %}
