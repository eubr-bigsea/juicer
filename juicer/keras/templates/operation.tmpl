#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import json

from keras.callbacks import Callback

"""
Auto-generated Keras code from Lemonade Workflow
(c) Speed Labs - Departamento de Ciência da Computação
    Universidade Federal de Minas Gerais
More information about Lemonade to be provided
"""
import keras
from keras.models import Model, Input, Sequential
from keras.layers import *
from keras import metrics
from keras.callbacks import TensorBoard
from time import time

from keras import backend as K
import numpy as np
import tensorflow as tf
import random as rn


{%- for instance in instances %}
{%- if instance.has_external_code and instance.enabled %}
{{ instance.external_code().strip() | indent(width=4, indentfirst=False) }}
{% endif %}
{%- endfor -%}


#np.random.seed(reproducible_seed)
#rn.seed(reproducible_seed)
#tf.set_random_seed(reproducible_seed)

#session_conf = tf.ConfigProto(intra_op_parallelism_threads=1,
#                              inter_op_parallelism_threads=1)
#sess = tf.Session(graph=tf.get_default_graph(), config=session_conf)
#K.set_session(sess)

def emit_layer_before_add(task_id, emit_event):
    emit_event(name='update task', message=_('Adding layer'), status='RUNNING',
               identifier=task_id)

def emit_layer_added(task_id, emit_event):
    emit_event(name='update task', message=_('Layer added'),
               status='COMPLETED', identifier=task_id)

class ExecutionHistory(Callback):
    def __init__(self, emit_event, output_task_id):
        Callback.__init__(self)
        self.emit_event = emit_event
        self.output_task_id = output_task_id

    def on_batch_end(self, batch, logs=None):
        msg = {}
        for k, v in logs.items():
            msg[k] = float(v)
        self.emit_event(name='update task', message=json.dumps(msg),
                   status='RUNNING', identifier=self.output_task_id)

{%- with create_method=True %}
{%- for instance in instances %}
{%- if instance.has_external_python_code_operation and instance.enabled %}
{%- if create_method %}
def preNN():
{%- with create_method=False %}
{% endwith %}
{{ instance.generate_code().strip() | indent(width=4, indentfirst=False) }}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
{% endwith %}

def main(session, cached_state, emit_event):

    tensorboard = TensorBoard(log_dir="/tmp/logs/{time}".format(time=time()))


    {%- for instance in instances %}
    {%- if instance.has_code and instance.enabled %}
    {%- set task = instance.parameters.task %}
    {%- set task_id = task.id %}
    # Task {{task_id}}
    {{ instance.generate_code().strip() | indent(width=4, indentfirst=False) }}
    emit_layer_added('{{task_id}}', emit_event)
    {% endif %}
    {%- endfor -%}


    emit_event(name='update task', message='<a href="http://localhost:6006" target="_blank">TensorBoard</a>',
                    type='HTML',
                    status='COMPLETED', identifier=output_task_id)

    emit_event(name='update task', message=final_train_score,
               type='TEXT',
               status='COMPLETED', identifier=output_task_id)

    return {}

