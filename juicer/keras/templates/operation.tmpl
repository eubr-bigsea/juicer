#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Auto-generated Keras code from Lemonade Workflow
(c) Speed Labs - Departamento de Ciência da Computação
    Universidade Federal de Minas Gerais
More information about Lemonade to be provided
"""

import tensorflow
import keras
from keras.callbacks import Callback
from keras import backend as K
{{transpiler.get_imports(instances)}}
import numpy as np
import random
import json
from tabulate import tabulate
from time import time
from keras import metrics
from juicer.keras.callbacks import JuicerCallback

np.random.seed(seed=2018)

def emit_layer_before_add(task_id, emit_event):
    emit_event(name='update task', message='', status='RUNNING',
               identifier=task_id, type='SILENT')


def emit_layer_added(task_id, emit_event):
    emit_event(name='update task', message='', type='SILENT',
               status='COMPLETED', identifier=task_id)


def tab(table, add_epoch=True, metric='', headers=set(), show_index=True):
    key = list(table.keys())[0]
    length = len(table[key])

    if add_epoch:
        headers = list(headers)
        headers.insert(0, 'epoch')

    if show_index:
        result = tabulate(
            table,
            headers=headers,
            showindex=range(1, length + 1),
            numalign="center",
            floatfmt=".4f",
            tablefmt="html",

        )
    else:
        result = tabulate(
            table,
            headers=headers,
            numalign="center",
            floatfmt=".4f",
            tablefmt="html",

        )
    return '<h5>{metric}</h5>'.format(metric=metric) + result.replace(
        '<table', '<table class="table table-striped table-bordered w-auto"')


class ExecutionHistory(Callback):
    def __init__(self, emit_event, output_task_id):
        Callback.__init__(self)
        self.emit_event = emit_event
        self.output_task_id = output_task_id

    def on_batch_end(self, batch, logs=None):
        msg = {}
        for k, v in logs.items():
            msg[k] = float(v)
        self.emit_event(name='update task', message=json.dumps(msg),
                   status='RUNNING', identifier=self.output_task_id)


class TimeLog(Callback):

    def __init__(self, path_to_save):
        self.path_to_save = path_to_save
        self.times = {}
        self.current_epoch = None
        self.batch_start_time = None

    def on_epoch_begin(self, epoch, logs=None):
        self.current_epoch = epoch
        self.times[self.current_epoch] = []

    def on_epoch_end(self, epoch, logs=None):
        for epoch_number, batch_times in self.times.items():
            np.save('{}/{}.npy'.format(self.path_to_save, epoch_number), np.array(batch_times))

        self.times = {}

    def on_train_batch_begin(self, batch, logs=None):
        self.batch_start_time = time()

    def on_train_batch_end(self, batch, logs=None):
        self.times[self.current_epoch].append(time() - self.batch_start_time)
        

{% for instance in instances %}
{%- if instance.has_external_code and instance.enabled %}
{{ instance.external_code().strip() | indent(width=0, indentfirst=False) }}
{% endif -%}
{% endfor -%}

{% for instance in instances %}
{%- if instance.has_external_python_code_operation and instance.enabled %}
{%- set task = instance.parameters.task %}
{%- set task_id = task.id %}
# Task {{task_id}}
#emit_layer_before_add('{{task_id}}', emit_event)
{{ instance.generate_code().strip() | indent(width=0, indentfirst=False) }}
#emit_layer_added('{{task_id}}', emit_event)
{% endif -%}
{% endfor %}

def main(session, cached_state, emit_event):

    {%- for instance in instances %}
    {%- if instance.has_code and instance.enabled %}
    {%- set task = instance.parameters.task %}
    {%- set task_id = task.id %}

    # Task {{task_id}}
    emit_layer_before_add('{{task_id}}', emit_event)
    {{ instance.generate_code().strip() | indent(width=4, indentfirst=False) }}
    {%- if instance.show_results %}
    emit_event(name='update task',
               message='<h5>TensorBoard</h5>' +
               '<p>TensorBoard provides the visualization and tooling needed for machine learning experimentation.</p>' +
               '<a href="http://zeppelin:6006" target="_blank">Click to open TensorBoard</a>',
               type='HTML',
               status='RESULTS',
               identifier='{{task_id}}')

    {{ instance.generate_history_code().strip() | indent(width=4, indentfirst=False) }}
    {%- endif %}
    emit_layer_added('{{task_id}}', emit_event)
    {%- endif %}
    {%- endfor %}


    return {}

