{#- Macros #}

{% macro prepare_x_axis(x_values) -%}
# Prepare X-Axis values.
#df = df.select(float(valor) for valor in '{{x_values[0].attribute}}')
df = df.sort('{{x_values[0].attribute}}')
{%- for x in x_values %}
col = pl.col('{{x.attribute}}')
{%- if x.as_categorical %}
df = df.with_columns([col.cast(pl.Utf8).cast(pl.Categorical)])
{%- endif %}
{%- if x.binning in ('FIXED_SIZE', 'EQUAL_INTERVAL') %}
def round_str(col, n:int=2):
    """ Format number. See https://stackoverflow.com/a/75893046/1646932"""
    return (
        col.round(n).cast(pl.Utf8) + pl.lit("0"*n)
    ).str.replace(r'^(-?\d+\.\d{' + str(n) + r'}).*$','$1')
{%- endif %}

{%- if x.binning == 'EQUAL_INTERVAL' %}
# Binning: equal interval
df = df.with_columns([
    (col - col.min()).alias('_diff'),
    ((col.max() - col.min())
            / {{x.bins}}).alias('_bin_size')
])
df = df.with_columns([
    pl.min([pl.col('_diff') // pl.col('_bin_size'),
        {{x.bins |int - 1}}]).cast(pl.Int16).alias('dim_{{loop.index0}}')
])
df = df.with_columns([
    pl.format(
        '{}-{}',
        round_str(
            pl.col('dim_{{loop.index0}}') * pl.col('_bin_size') + col.min()),
        round_str(
            (pl.col('dim_{{loop.index0}}') + 1) * pl.col('_bin_size') + col.min()),
    )
])
{%- elif x.binning == 'FIXED_SIZE' %}
df = df.with_columns([
    (col.min() - 0.5 * {{x.bin_size}}).alias('_bin_start'),
    (col // {{x.bin_size}}).alias('_bin')
])
df = df.with_columns([
    pl.format(
        '{}-{}',
        round_str(
            pl.col('_bin') * {{x.bin_size}} + pl.col('_bin_start')),
        round_str(
            (1 + pl.col('_bin')) * {{x.bin_size}} + pl.col('_bin_start')),
    ).alias('dim_{{loop.index0}}')
])
{%- elif x.binning == 'QUANTILES' %}
df = df.with_columns([
    df.select('{{x.attribute}}').collect().get_column('{{x.attribute}}')
        .qcut({{x.quantiles_list}},
                labels={{x.labels}})
        .get_column('category')
        .alias('dim_{{loop.index0}}')
])
{%- elif x.binning == 'CATEGORICAL' %}
# Binning: Convert to categorical
df = df.with_columns([
    col.cast(pl.Utf8).cast(pl.Categorical).alias('dim_{{loop.index0}}'),
])
{%- else %}
# Binning is NONE
df = df.with_columns([col.alias('dim_{{loop.index0}}')])
{%- endif %}
{%- endfor %}
{%- endmacro %}

{%- macro prepare_aggregations(op) %}
{%- if op.aggregations %} {# aggregations #}
aggregations = [
    {%- for y in op.aggregations %}
    {%- if y.attribute == '*' %}(
    {%- if y.multiplier  %}{{y.multiplier}} * {% endif -%}
    # Cast to Float64 because to_pandas() convert to uint32 and it is not
    # supported by Plotly
    pl.count()).alias('aggr_{{loop.index0}}').cast(pl.Float64),
    {%- else %}
    (
    {%- if y.multiplier  %}{{y.multiplier}} * {% endif -%}
    # Cast to Float64 because to_pandas() convert to uint32 and it is not
    # supported by Plotly
    pl.{{op.AGGR.get(y.aggregation, y.aggregation.lower()) -}}
        ('{{y.attribute}}')).alias('aggr_{{loop.index0}}').cast(pl.Float64),
    {%- endif %}
    {%- endfor %}
    {%- for x in x_values %}
    {%- if x.binning in ('FIXED_SIZE', 'QUANTILES', 'EQUAL_INTERVAL') %}
    pl.min('{{x.attribute}}').alias('_min_{{loop.index0}}'),
    {%- endif %}
    {%- endfor %}
]
# Group data
{%- if x_values %}
dimensions = [
    {%- for x in x_values %}
    (pl.col('dim_{{loop.index0}}') {%- if x.multiplier %} * {{x.multiplier}}{% endif -%})
    {#%- if x.decimal_places %}.round({{x.decimal_places}}){% endif %#},
    {%- endfor %}

    {%- if op.subgraph and op.subgraph.attribute != '' %}
    pl.col('{{op.subgraph.attribute}}'), # subgraph
    {%- endif %}

    {%- if op.animation and op.animation != '' %}
    pl.col('{{op.animation.attribute}}'), # animation
    {%- endif %}

    {%- if op.scatter_family %}
    {%- if op.color_attribute and op.color_attribute.attribute%}
    pl.col('{{op.color_attribute.attribute}}'), #color
    {%- endif %}

    {%- if op.size_attribute and op.size_attribute.attribute%}
    pl.col('{{op.size_attribute.attribute}}'), #size
    {%- endif %}
    {%- endif %}
]
df = df.groupby(dimensions).agg(aggregations)
{%- else %}
# No x value specified!
df = df.select(aggregations)
{%- endif %}
{%- else %}
# Test, not working for all kind of charts!
dimensions = [
    {%- for x in x_values %}
    pl.col('dim_{{loop.index0}}'),
    {%- endfor %}

    {%- if op.subgraph and op.subgraph.attribute != '' %}
    pl.col('{{op.subgraph.attribute}}'), # subgraph
    {%- endif %}

    {%- if op.animation and op.animation != '' %}
    pl.col('{{op.animation.attribute}}'), # animation
    {%- endif %}

    {%- if op.color_attribute and op.color_attribute.attribute %}
    pl.col('{{op.color_attribute.attribute}}'), # color
    {%- endif %}
    {%- if op.size_attribute and op.size_attribute.attribute %}
    pl.col('{{op.size_attribute.attribute}}'), # size
    {%- endif %}

];
attributes = [{% for y in op.y -%}
    '{{y.attribute}}',
{%- endfor %}]
df = df.select(attributes + dimensions)
{%- endif %}
{%- endmacro %}

{%- macro fix_missing_in_serie(op) %}
# Fill the missing values. Otherwise, series may be wrongly
# sorted in the x-axis (if a new x-value is discovered after
# a previous serie is plot.
# For example, for the first serie, there is no ('v1', 'a1') value,
# but for there is a value for the second serie. The value 'a1'
# would be displayed after values found in the first serie,
# causing x-axis to become wrongly sorted.
tmp_df = (df.select('dim_0')
            .unique()
            .join(df.select('dim_1').unique(), how='cross')
        )
df = df.join(tmp_df, on=['dim_0', 'dim_1'], how='outer').sort(
    ['dim_0', 'dim_1']).fill_null(0)
{%- endmacro %}

{%- macro fix_zeroes_in_chart(op) %}
# Remove 0's because they cause ZeroDivisionError
df = df.filter(pl.col('aggr_0') != 0)
df = df.with_columns([
    {%- for y in op.y[:op.y_limit] %}
    pl.col('aggr_{{loop.index0}}').cast(pl.Float64),
    {%- endfor %}
])
{%- endmacro %}

{%- macro define_labels(op, x_values) %}
labels = {
    'variable': 'SÃ©rie',
    {%- for y in op.y[:op.y_limit] %}
    {%- if op.aggregations %}
    'aggr_{{loop.index0}}':
    {%- else %}
    '{{y.attribute}}':
    {%- endif %}
    {%- if y.label -%}
    '{{y.label}}',
    {%- elif op.aggregations -%}
    '{{op.AGGR.get(y.aggregation, y.aggregation.lower()) -}}
        ({{y.attribute}})',
    {%- else %}
    '{{y.attribute}}',
    {%- endif %}
    {%- endfor -%}
    {%- for x in x_values -%}
        'dim_{{loop.index0}}': '{{x.displayLabel or x.attribute}}', {%- endfor %}
}
{%- endmacro %}

{%- macro handle_sort(op, x_values) %}
df = df.sort(
    by=[
    {%- for x in x_values -%}
    {%- if x.sorting in ('Y_ASC', 'Y_DESC') -%}
    {%- if op.aggregations %}
    'aggr_0',
    {%- else %}
    '{{op.literal[0].attribute}}',
    {%- endif %}
    {%- elif x.binning in ('FIXED_SIZE', 'QUANTILES', 'EQUAL_INTERVAL') %}
    '_min_{{loop.index0}}',
    {%- else %}
    'dim_{{loop.index0}}',
    {%- endif %}
    {%- endfor %}],
    descending=[
    {%- for x in x_values -%}
    {{ x.sorting == 'Y_DESC'}},
    {%- endfor %}])

{%- endmacro %}

{%- macro prepare_group_others(op, x_values, y_values) %}
{%- set y = y_values[0] %}
{%- for x in x_values %}
{%- if x.max_displayed %}
# Limit the number of items to be displayed
# Compute the top {{x.max_displayed}} item(s)

top_x_{{loop.index0}} = (df.groupby('{{x.attribute}}')
    .agg(pl.{{op.AGGR.get(y.aggregation, y.aggregation.lower()) -}}('{{y.attribute}}'))
    .sort(by=[{% if x.sorting in ('Y_ASC', 'Y_DESC') %}'{{x.attribute}}'
        {%- else %}'{{y.attribute}}'
        {%- endif %}],  descending=[True])
    .unique(subset='{{x.attribute}}', maintain_order=True)
    .limit({{x.max_displayed}})
    .collect().get_column('{{x.attribute}}').to_list())
df = df
    {%- if not x.group_others -%}
    .filter(pl.col('{{x.attribute}}').is_in(top_x_0))
    {%- endif -%}
    .with_columns([
    pl.when(pl.col('{{x.attribute}}').is_in(top_x_0))
        .then(pl.col('{{x.attribute}}'))
        {%- if x.group_others %}
        .otherwise(pl.lit('{{x.label_others or "others"}}'))
        {%- endif %}
        .alias('{{x.attribute}}')
])
{%- endif %}
{%- endfor %}
{%- endmacro %}

{#------- End Macros --------------#}

{%- set type = op.type.lower() %}
{%- set map_family = type in op.CHART_MAP_TYPES %}

{%- if op.pie_family %}
{%- set x_values = op.x[:1] %}
{%- else %}
{%- set x_values = op.x %}
{%- endif -%}

df = {{input}}.clone()
{{ prepare_group_others(op, x_values, op.y) }}

colors = {{op.discrete_colors}}

{%- if map_family %}
{%- elif type == 'indicator' %}
{{ prepare_aggregations(op) }}
#### df = df.select(aggregations)
{%- else %}
{{ prepare_x_axis(x_values) }}
{{ prepare_aggregations(op) }}
{%- endif %}

{%- if op.limit %}
df = df.limit({{op.limit}})
{%- endif %}

{%- if x_values|length > 1 and not op.treemap_family %}
{{fix_missing_in_serie(op) }}
{%- endif %}

{%- if op.treemap_family %}
{{ fix_zeroes_in_chart(op) }}
{%- endif %}

{%- if x_values %}
{{ handle_sort(op, x_values) }}
{%- endif %}

pandas_df = df.collect().to_pandas()
{%- if not map_family %}
{{ define_labels(op, x_values) }}
{%- endif %}


#  Chart definition
{%- if type in ('line', 'stacked-area', 'stacked-area-100',
    'bar', 'stacked-bar', 'horizontal-bar',
    'stacked-horizontal-bar', 'scatter', 'bubble',
    ) or op.treemap_family %}

{%- if x_values|length == 1 or type.endswith('bar')%}
axis1 = 'dim_0'
{%- else %}
axis1 = [{% for x in x_values %}'dim_{{loop.index0}}',{% endfor%}]
{%- endif %}

{%- if op.y_limit == 1 and op.aggregations %}
axis2 = 'aggr_0'
{%- elif op.y_limit == 1 and op.literal%}
axis2 = '{{op.literal[0].attribute}}'
{%- elif op.literal %}
axis2 = [
      {%- for y in op.y[:op.y_limit] -%}
        '{{y.attribute}}',
      {%- endfor -%}
      ]
{%- else %}
axis2 = [
      {%- for y in op.y[:op.y_limit] -%}
        'aggr_{{loop.index0}}',
      {%- endfor -%}
      ]
{%- endif %}
{%- if op.subgraph and op.subgraph.attribute != '' %}
# Sort data by the subgraph "{{op.subgraph.attribute}}" column
pandas_df = pandas_df.sort_values('{{op.subgraph.attribute}}', ascending=True)
{%- endif %}
fig = px.
    {%- if type in ('stacked-area-100', 'stacked-area') -%}
    area
    {%- elif type in ('stacked-bar', 'stacked-horizontal-bar', 'horizontal-bar') -%}
    bar
    {%- elif type in ['bubble'] -%}
    scatter
    {%- else %}{{type}}{% endif -%}(
        pandas_df,
        {%- if 'horizontal' in type %}
        # Invert axis values
        x=axis2,
        y=axis1,
        {%- elif op.treemap_family %}
        path=[{% for x in x_values %}'dim_{{loop.index0}}', {% endfor %}],
        values='aggr_0',
        {%- elif op.map_family %}
        lat='{{op.latitude}}', lon='{{op.longitude}}',
        {%- if op.magnitude %}z='{op.magnitude}',{% endif %}
        {%- else %}
        x=axis1,
        y=axis2,
        {%- endif %}
        {%- if x_values|length > 1 and type in ('bar', ) and False-%}
        color='dim_1',
        pattern_shape="dim_1",
        template="simple_white",
        {%- elif x_values|length > 1 and type not in ('scatter', 'bubble', 'bar') and not type.endswith('bar') and not op.treemap_family -%}
        line_group='dim_1', color='dim_1',
        {%- elif x_values|length > 1 and type not in ('scatter', 'bubble') -%}
        color='dim_1',{% endif %}
        {%- if not op.treemap_family %}
        log_y={{op.y_axis.get('logScale', False)}},
        log_x={{op.x_axis.get('logScale', False)}},
        {%- endif %}

        {%- if op.blackWhite %}
        # Remove white color (last one generated)
        color_discrete_sequence=n_colors(
            'rgb(0, 0, 0)', 'rgb(255, 255, 255)', pandas_df.shape[1] + 1, colortype='rgb')[:-1],
        {%- elif op.treemap_family %}
        {%- if op.color_scale %}color_continuous_scale={{op.color_scale}},{% endif %}
        {%- else %}
        color_discrete_sequence={{op.discrete_colors}},
        {%- endif %}
        {%- if op.title %}title='{{op.title}}',{% endif %}
        {%- if type in ('bar', 'horizontal-bar') %}barmode='group',{% endif %}
        {%- if op.stacked_family %}barmode='stack',{% endif %}
        {%- if op.horizontal_bar_family %}orientation='h',{% endif %}
        {%- if op.filled_area_family %}orientation='v',{% endif %}
        {%- if type in ('stacked-area-100', ) %}groupnorm='percent',{% endif %}

        {%- if type in ('scatter', 'bubble')%}
        {%- if  op.color_attribute and op.color_attribute.attribute %}
        color='{{op.color_attribute.attribute}}',
        {%- endif %}
        {%- if  op.size_attribute and op.size_attribute.attribute%}
        size='{{op.size_attribute.attribute}}',
        {%- endif %}
        {%- endif %}
        labels=labels,
        {%- if type == 'line' and op.smoothing %}
        # https://github.com/plotly/plotly.py/issues/2812
        render_mode='svg',
        {%- endif %}

        {%- if op.subgraph and op.subgraph.attribute != '' %}
        facet_{{'row' if op.subgraph_orientation == 'v' else 'col'}}='{{op.subgraph.attribute}}',
        facet_col_wrap=4,
        {%- endif %}

        {%- if op.animation and op.animation != '' %}
        animation_frame='{{op.animation.attribute}}',
        animation_group='{{op.animation.attribute}}',
        {%- endif %}
        {%- if op.width %}width={{op.width}},{%elif op.max_width%}width={{op.max_width}},{% endif %}
        {%- if op.height %}height={{op.height}},{%elif op.max_height%}height={{op.max_height}},{% endif %}
    )

# Update labels
update_labels = lambda _labels: (
        lambda t: t.update(name = _labels.get(t.name, t.name),
                {%- if not op.treemap_family %}
                legendgroup = _labels.get(t.name, t.name),
                {%- endif %}
                hovertemplate = t.hovertemplate.replace(
                    t.name, _labels.get(t.name, t.name))
        ))
fig.for_each_trace(update_labels(labels))
{%- if op.type.endswith('bar') and op.y_axis.normalization %}
fig.update_layout(barnorm='{{op.y_axis.normalization}}')
{%- endif %}

#fig.update_layout(xaxis_categoryorder='total ascending')
# fig.for_each_trace(lambda t: t.update(name = labels.get(t.name, t.name)))
# {{op.y_axis}}
fig.update_yaxes(
    {%- if op.y_axis.get('displayLabel', True) %}
        {%- if op.y_axis.label %}
    title_text='{{op.y_axis.label}}',
        {%- endif %}
    {%- else %}
    title_text=None,
    {% endif %}
    showgrid=True,
    gridcolor="rgba(255,0,0,.10)",
    visible={{op.y_axis.get('display', True)}},
    tickformat={%- if type == 'stacked-area-100' %}None{% else %}'.{{op.y_axis.get('decimal_places', 2)}}f'{% endif %},
    {%- if op.y_axis.prefix %}tickprefix='{{op.y_axis.prefix}}',{% endif %}
    {%- if op.y_axis.suffix %}
    ticksuffix=
    {%- if type == 'stacked-area-100' %}'%'{% else %}'{{op.y_axis.suffix}}'{% endif %},
    {%- endif %}
    range={{op.y_range}},
    #showtickprefix="first",
    #showticksuffix="last"
)
fig.update_xaxes(
    {%- if op.x_axis.get('displayLabel', True) %}
        {%- if op.x_axis.label %}
    title_text='{{op.x_axis.label}}',
        {%- endif %}
    {%- else %}
    title_text=None,
    {% endif %}
    showgrid=True,
    gridcolor="rgba(255,0,0,.10)",
    categoryorder='trace', # Sorting follow the one defined for the input data
    visible={{op.x_axis.get('display', True)}},
    tickformat= {%- if type == 'stacked-area-100' %}None{% else %}'.3f'{% endif %},
    {%- if op.x_axis.prefix %}tickprefix='{{op.x_axis.prefix}}',{% endif %}
    {%- if op.x_axis.suffix %}
    ticksuffix=
    {%- if type == 'stacked-area-100' %}'%'{% else %}'{{op.x_axis.suffix}}'{% endif %},
    {%- endif %}
)
{%- if op.smoothing and type == 'line' %}
fig.update_traces(line={'shape': 'spline', 'smoothing': 0.4})
{%- endif %}

{%- if type == 'line' %}
sizes = [{% for y in op.y -%}
    {%- if y.strokeSize -%}
    {{y.strokeSize}},
    {%- else %}
    1,
    {%- endif %}
    {%- endfor %}]

styles = [{% for y in op.y -%}
    {%- if y.stroke -%}
    '{{y.stroke}}',
    {%- else %}
    'solid',
    {%- endif %}
    {%- endfor %}]

{%- if x_values |length > 1 %}
sizes = sizes * {{x_values |length}}
styles = styles * {{x_values |length}}
{%- endif %}

for s, z, style in zip(fig.data, sizes, styles):
    s.line['dash'] = style
    s.line['width'] = z
    #s.marker.symbol = next(markers)
    # s.marker.size = z
{%- endif %}

{%- elif type in ('heatmap', ) %}
fig = px.imshow(
    pandas_df,
    x=[{% for x in op.x[:2] %}'{{x.attribute}}',{% endfor %}],
    y='{{op.y[0].attribute}}',
    text_auto=True, aspect='auto'
)
{%- elif op.pie_family %}
{%- if op.subgraph and op.subgraph.attribute != '' %}
# Sort data by the subgraph "{{op.subgraph.attribute}}" column
pandas_df = pandas_df.sort_values('{{op.subgraph.attribute}}', ascending=True)
{%- endif %}
# {{op.aggregations}}
fig = px.pie(
    pandas_df,
    values='{% if op.aggregations %}aggr_0{% else %}{{ op.y[0].attribute }}{% endif %}',
    names='dim_0',
    {%- if op.blackWhite %}
    color_discrete_sequence=n_colors(
        'rgb(0, 0, 0)', 'rgb(255, 255, 255)', pandas_df.shape[0] + 1, colortype='rgb'),
    {%- elif op.palette %}
    color_discrete_sequence=colors,
    {%- endif %}
    {%- if op.title %}
    title='{{op.title}}',
    {%- endif %}
    {%- if type == 'donut' %}hole={{op.hole * 0.01}},{% endif %}
    labels=labels,
    {%- if op.subgraph and op.subgraph.attribute != '' %}
    facet_{{'row' if op.subgraph_orientation == 'v' else 'col'}}='{{op.subgraph.attribute}}',
    facet_col_wrap=4,
    {%- endif %}
    {%- if op.width %}width={{op.width}},{% endif %}
    {%- if op.height %}height={{op.height}},{% endif %}
)
fig.update_layout(extendpiecolors=True)
# fig.update_traces(pull=0.1)
{%-if op.text_position or op.text_info or op.y[0].strokeSize %}
fig.update_traces(
    {%- if op.text_position %}textposition='{{op.text_position}}',
    {%- endif %}
    {%- if op.text_info %}textinfo='{{op.text_info}}',{% endif %}
    {%- if op.y[0].strokeSize %}marker=dict(
        line=dict(color='{{op.y[0].line_color or "#000000"}}', width={{op.y[0].strokeSize}}, )),{% endif %}
    {#pull=[0.01] * {{op.y |length}}, -#}
)
{%- endif %}

{%- elif type in ('boxplot',) and not op.aggregations %}
fig = make_subplots(cols=1, rows={{op.y|length}},
   subplot_titles=[{%for y in op.y %}'{{y.attribute}}',{% endfor %}])

{%- for y in op.literal %}
fig.add_trace(
	go.Box(x=pandas_df['dim_0'], y=pandas_df['{{y.attribute}}'],
		name='{{y.attribute}}'), col=1, row={{loop.index}})
{%- endfor %}

fig.update_traces(quartilemethod="exclusive")
{%- elif type in ('boxplot',) and op.aggregations %}
fig = px.box(pandas_df,
             x='dim_0',
             y={% if op.aggregations %}'aggr_0'{% else %}[
             {%- for y in op.y  %}
             '{{y.attribute}}',
             {%- endfor %}]
             {%- endif %},
             #points="all",
             #marker_color='{{op.palette}}'
             #opacity = {{op.opacity}},
             color='dim_0',
             title='{{op.title}}',
             labels=labels,
)
fig.update_traces(quartilemethod="exclusive")

{%- elif type in ('scattergeo',) %}
fig = px.scatter_geo(pandas_df,locations='dim_0',color='aggr_0',
                     hover_name='dim_1', size='aggr_0',
                     projection="natural earth",
                     color_continuous_scale={{op.color_scale}},
                     labels=labels,)

fig.update_layout(
        title_text = '{{op.title}}',
        #opacity = {{op.opacity}},
        ###showlegend = True,
    )



{%- elif type in ('pointcloud',) %}

#pandas_df['dim_0'] = pandas_df['dim_0'].cast(pl.Float64)
#pandas_df['aggr_0'] = pandas_df['aggr_0'].cast(pl.Float64)
#pandas_df['dim_1'] = pandas_df['dim_1'].cast(pl.Float64)

#valid_data = pandas_df.dropna(subset=['dim_0', 'aggr_0', 'dim_1'])

fig = go.Figure(data=go.Scatter3d(
    x=pandas_df['dim_0'],
    y=pandas_df['aggr_0'],
    z=pandas_df['dim_1'],
    #x='dim_0',
    #y='aggr_0',
    #z='dim_1',
    mode='markers',
    #color_discrete_sequence ={{op.palette}},
    marker=dict(
        #color={{op.palette}},
        #color_discrete_sequence ={{op.palette}},
        opacity = {{op.opacity}},
    )
))

fig.update_layout(
    ###showlegend = True,
    title='{{op.title}}',
    scene=dict(
        xaxis_title=pandas_df.columns[0],
        yaxis_title=pandas_df.columns[1],
        zaxis_title=pandas_df.columns[2]
    )
)

{%- elif type in ('scatterplot',) %}
fig = px.scatter(pandas_df,
      x='dim_0',
      y='aggr_0',
      color='aggr_1',
      #marginal_y="violin",
      #marginal_x="box",
      trendline="ols",
      template="simple_white")

{%- elif type in ('histogram2d',) %}
fig = px.density_heatmap(pandas_df,
      x='dim_0',
      y='aggr_0',
      marginal_x="box",
      marginal_y="violin",
      #name='{{op.title}}',
      title='{{op.title}}',
      labels=labels,
      color_continuous_scale={{op.color_scale}},
      )


{%- elif type in ('funnel',) %}
# inverted axis
labels=pandas_df['dim_0']
values=pandas_df['aggr_0']
data = list(zip(labels, values))
data_sorted = sorted(data, key=lambda x: x[1], reverse=True)
sorted_labels, sorted_values = zip(*data_sorted)
fig = go.Figure()
fig.add_trace(go.Funnel(
    y=sorted_labels,
    x=sorted_values,
    name='{{op.title}}',
    opacity = {{op.opacity}},
    marker = {"color":{{op.color_attribute}}},
    #marker = {"color":{{op.palette}}},
    textinfo='value+percent initial',
))

{%- elif type in ('violin',) %}
    fig = px.violin(pandas_df,
        # eixos trocados
        y='aggr_0',
        x='dim_0',
        # trocar para testar a paleta de cores
        color='dim_0',
        box=True,
        points="all",
        hover_data=pandas_df.columns,
        title='{{op.title}}',
        labels=labels,
    )


{%- elif type in ('parcoords',) %}
fig = px.parallel_coordinates(pandas_df,
      #color='dim_0',
      labels=labels,
      dimensions=['aggr_0', 'aggr_1', 'aggr_2', 'aggr_3'],
      color_continuous_scale = {{op.color_scale}},
      title='{{op.title}}',
      color_continuous_midpoint=2)


{%- elif type in ('histogram2dcontour',) %}
fig = px.density_contour(pandas_df,
    x='dim_0',
    y='aggr_0',
    title='{{op.title}}',
    labels=labels,
    )
fig.update_traces(contours_coloring="fill",
    #colorscale = {{op.palette}},
    {%- if op.color_scale %}
        colorscale={{op.color_scale}},
    {% endif %}
    #colorscale = {{op.color_scale}},
    contours_showlabels = True)

{%- elif op.treemap_family %}
#
#fig = px.{{type}}(
#    pandas_df,
#    path=[{% for x in x_values %}'dim_{{loop.index0}}', {% endfor %}],
#    values='aggr_0',
#    color='aggr_0',
#    {%- if op.color_scale %}color_continuous_scale={{op.color_scale}},{% endif %}
#    title='{{op.title}}',
#    labels=labels,
#)

# fig.update_layout(margin = dict(t=50, l=25, r=25, b=25)) # FIXME


{%- elif type in ('indicator', ) %}
fig = go.Figure(go.Indicator(
    mode = "number",
    value = pandas_df.iloc[0][0],
    # title='{{op.title}}',
    # domain = {'x': [0, 1], 'y': [0, 1]}
))
{%- elif map_family %}
{%- if op.type == 'choropleth'%}
# Load GeoJson file, if it is not in cache
geo_json_url = '{{op.geo_json_url}}'
tmp_path = Path(tempfile.gettempdir()) / Path(
    f'{hashlib.md5(geo_json_url.encode()).hexdigest()}.json')
if tmp_path.exists():
    with open(tmp_path) as f:
        geo_json = json.load(f)
else:
    resp = requests.get(geo_json_url)
    if resp.status_code == 200:
        geo_json = resp.json()
        with open(tmp_path, 'w') as f:
            json.dump(geo_json, f)
    else:
        raise ValueError(gettext('GeoJson file could not be downloaded'))
{%- endif %}
fig = px.{{op.get_plotly_map_type()}}(
    pandas_df,
    {%- if op.type != 'choropleth'%}
    lat='{{op.latitude}}', lon='{{op.longitude}}',
    mapbox_style='{{op.style or 'open-street-map'}}',
    {%- if op.magnitude %}z='{{op.magnitude}}',{% endif %}
    {%- if op.marker_size %}radius={{op.marker_size}},{% endif %}
    {%- if op.zoom %}
        zoom={{op.zoom}},{% endif %}
    {%- if op.text_attribute %}
        text='{{op.text_attribute}}',{% endif %}
    {%- if op.size_attribute %}
        size='{{op.size_attribute}}',{% endif %}
    {%- else %}
    geojson=geo_json,
    featureidkey="properties.{{op.feature_id_key}}",
    locations="{{op.locations}}",
    scope=None,
    {%- endif %}
    {%- if op.center_latitude or op.center_longitude %}
        center={'lat': {{op.center_latitude or 'None'}}, 'lon': {{op.center_longitude or 'None'}}},
    {%- endif %}
    {%- if op.title %}
        title='{{op.title}}',{% endif %}
    {%- if op.color_attribute %}
        color='{{op.color_attribute}}',{% endif %}
    {%- if op.width %}
        width={{op.width}},
    {%elif op.max_width%}
        width={{op.max_width}},{% endif %}
    {%- if op.height %}
        height={{op.height}},{%elif op.max_height%}height={{op.max_height}},{% endif %}
    {%- if op.hover_name %}
        hover_name='{{op.hover_name}}',{% endif %}
    {%- if op.hover_data %}
        hover_data={{op.hover_data}},{% endif %}
    {%- if op.use_color_scale and op.color_scale %}
        color_continuous_scale={{op.color_scale}},{% endif %}
    {%- if op.use_discrete_colors and op.discrete_colors %}
        color_discrete_sequence={{op.discrete_colors}},{% endif %}
)
{%- if type == 'scattermapbox' %}
fig.update_traces(
    {%- if op.marker_size %}marker_sizeref={{op.marker_size}},{% endif %}
    {%- if op.text_info %}mode='{{op.text_info}}',{% endif %}
    {%- if op.tooltip_info %}hoverinfo='{{op.tooltip_info}}',{% endif %}
)
{%- elif type == 'choropleth' %}
fig.update_geos(fitbounds="locations", visible=False)
# Add borders for polygons not present in the dataframe
found = set(df.select('{{op.locations}}').collect().get_column('{{op.locations}}').to_list())
for feature in geo_json['features']:
    key = feature['properties']['{{op.feature_id_key}}']
    if key not in found:
        geom = feature['geometry']
        if geom['type'] == 'Polygon':
            lon, lat = zip(*geom['coordinates'][0])
            fig.add_trace(go.Scattergeo(
                lon = lon,
                lat = lat,
                mode = 'lines',
                line = dict(width=1, color='black'),
                showlegend = False,
                hoverinfo='skip',
            ))
        elif geom['type'] == 'MultiPolygon':
            for polygon in geom['coordinates']:
                lon, lat = zip(*polygon[0])
                fig.add_trace(go.Scattergeo(
                    lon = lon,
                    lat = lat,
                    mode = 'lines',
                    line = dict(width=1, color='black'),
                    showlegend = False,
                    hoverinfo='skip',
                ))
fig.data = fig.data[1:] + (fig.data[0], )
{%- endif %}
###fig.update_layout(autosize=True, showlegend=True)

{%- endif %}

{%- if op.blackWhite and (type.endswith('bar')) %}
#fig.update_traces(
#    marker=dict(color="black", line_color="black", pattern_fillmode="replace"))
{%- endif %}

{%- if op.opacity is not none and op.opacity >=0 and op.opacity != 1 %}
fig.update_traces(opacity={{op.opacity}})
{%- endif %}

# Legend and separators.
fig.update_layout(
    {%- if op.number_format %}separators='{{op.number_format}}',{% endif %}
    {%-if op.display_legend == 'HIDE' %}
    showlegend=False,
    {%- elif op.display_legend != 'AUTO' %}
    showlegend=True,
    legend=dict(
        title=_('Legenda'),
        orientation="{%if 'CENTER' in op.display_legend %}h{%else%}v{%endif%}",
        yanchor="{% if 'BOTTOM' in op.display_legend %}bottom
        {%- else %}top{% endif %}",
        y={% if 'BOTTOM' in op.display_legend %}-.30
        {%- else %}.99{% endif %},
        xanchor="{{op.display_legend.lower().replace('bottom_', '')}}",
        x={% if 'CENTER' in op.display_legend %}0.5,
        {%- elif 'LEFT' in op.display_legend %}.1,
        {%- else %}.99,{% endif %}
    ),
    {%- elif 0 %}
    legend=dict(
        borderwidth=1,
        bordercolor='#222',
    ),
    {%- endif %}
)

{%- if False and (op.custom_colors) and (not op.pie_family) and (not map_family) %}
{%- for inx, c in op.custom_colors %}
{%- if c %}
fig.update_traces(dict(
    {%- if type.endswith('bar') %}marker{% else %}line{% endif -%}
    ={'color': '{{op.y[inx].line_color or c}}'}), {{inx}})
{%- endif %}
{%- endfor %}
{%- endif %}

{%- if op.shapes and type not in ('line',) and not op.pie_family and not map_family  %}
# Shapes {{op.shapes}}
{%- for inx, c in op.shapes %}
fig.update_traces(dict(
    {%- if type.endswith('bar') %}marker{% else %}line{% endif -%}
    ={'pattern': {'shape': '{{c or ''}}'}}), {{inx}})
{%- endfor %}
{%- endif %}

{%- if op.template_ and op.template_ != 'none' %}
# Template/theme
fig.update_layout(template='{{op.template_}}')
{%- endif %}

# fig.update_traces(marker={'line': {'color': colors, 'width': 5}, 'pattern': {'shape': '.', 'fillmode':'replace' }})

{%- if False and  not op.fill_opacity is none %}
# Fill transparency
{%- if not op.pie_family and not map_family and op.palette and not op.treemap_family %}
def _fill_transparency(transparent_colors):
    cycle = itertools.cycle(transparent_colors)
    def f(trace):
        trace.update(
            marker={
                'line': {'color': trace.marker.color, 'width': 1.5},
                #'pattern': {'shape': '\\', 'fillmode': 'replace'},
                'color': next(cycle),
            }
        )
    return f

fig.for_each_trace(_fill_transparency(transparent_colors))

{%- elif op.pie_family %}
fig.update_traces(marker=dict(colors=transparent_colors))
{%- endif %}
{%- endif %}
# Tooltip
#expr_agg = re.compile(r'aggr_\d+')
#fig.for_each_trace(
#    lambda trace:
#        trace.update(hovertemplate=expr_agg.sub(trace.name, trace.hovertemplate))
#)
{%- if not map_family and op.y[0].decimal_places is not none and op.y[0].decimal_places != ''%}
# Rounding
{%- if op.pie_family and op.text_info %}
fig.update_traces(
    texttemplate='
    {%- if 'label' in op.text_info %}%{label}<br>{% endif %}
    {%- if 'value' in op.text_info %}%{value:.{{op.y[0].decimal_places}}f}<br>{% endif %}
    {%- if 'percent' in op.text_info %}%{percent:.{{2 + op.y[0].decimal_places}}p}{% endif -%}
    '
)
{%- elif op.pie_family and op.text_info %}-
fig.update_traces(textinfo='{{op.text_info}}')
{%- endif %}
# fig.update_traces(texttemplate='%{value:.6f}')
{%- endif %}

# Margins
{%- if op.auto_margin %}
fig.update_yaxes(automargin=True)
fig.update_xaxes(automargin=True)
{%- else %}
fig.update_layout(
    margin=dict(
        l={{op.left_margin}}, r={{op.right_margin}},
        t={{op.top_margin}}, b={{op.bottom_margin}})
)
{%- endif %}

{%- if op.animation and not op.pie_family %}
# Animation configuration
fig.update_layout(transition = {'duration': 1000})
fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 1000
{%- endif %}

d = json.loads(fig.to_json())
emit_event(
    'update task', status='COMPLETED',
    identifier='{{op.task_id}}',
    message=d,
    type='PLOTLY', title='',
    task={'id': '{{op.task_id}}'},
)

{{out}} = None

