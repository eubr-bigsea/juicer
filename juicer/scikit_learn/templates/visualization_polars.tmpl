{#- Macros #}

{% macro prepare_x_axis(x_values) -%}
# prepare_x_axis()
# Prepare X-Axis values.
{%- for x in x_values %}
col = pl.col('{{x.attribute}}')
# {{x}}
{%- if x.binning == 'EQUAL_INTERVAL' %}
# Binning with equal interval
df = df.with_columns([
    (col - col.min()).alias('_diff'),
    ((col.max() - col.min())
            / {{x.bins}}).alias('_bin_size')
])
df = df.with_columns([
    pl.min([pl.col('_diff') // pl.col('_bin_size'),
        {{x.bins - 1}}]).cast(pl.Int16).alias('dim_{{loop.index0}}')
])
{%- elif x.binning == 'EQUAL_INTERVAL' %}
{%- else %}
df = df.with_columns([col.alias('dim_{{loop.index0}}')])
{%- endif %}
{%- endfor %}
{%- endmacro %}

{%- macro define_colors(op) %}
# define_colors()
{%- if not op.fill_opacity is none %}
transparent_colors = [
    {% for c in op.palette%}'{{hex_to_rgba(c, op.fill_opacity)}}', 
	{% endfor %}]
{%- endif %}
colors = {{op.palette}}
{%- endmacro %}

{%- macro prepare_aggregations(op) %}
# prepare_aggregations()
{%- if op.aggregations %} {# aggregations #}
aggregations = [
    {%- for y in op.aggregations %}
    {%- if y.attribute == '*' %}(
    {%- if y.multiplier  %}{{y.multiplier}} * {% endif -%}
    # Cast to Float64 because to_pandas() convert to uint32 and it is not
    # supported by Plotly
    pl.count()).alias('aggr_{{loop.index0}}').cast(pl.Float64),
    {%- else %}
    (
    {%- if y.multiplier  %}{{y.multiplier}} * {% endif -%}
    # Cast to Float64 because to_pandas() convert to uint32 and it is not
    # supported by Plotly
    pl.{{op.AGGR.get(y.aggregation, y.aggregation.lower()) -}}
        ('{{y.attribute}}')).alias('aggr_{{loop.index0}}').cast(pl.Float64), 
    {%- endif %}
    {%- endfor %}
]
# Group data
dimensions = [
    {%- for x in x_values %}
    (pl.col('dim_{{loop.index0}}') {%- if x.multiplier %} * {{x.multiplier}}{% endif -%})
    {#%- if x.decimal_places %}.round({{x.decimal_places}}){% endif %#},
    {%- endfor %}
    
    {%- if op.subgraph and op.subgraph != '' %}
    pl.col('{{op.subgraph.attribute}}'),
    {%- endif %}

    {%- if op.animation and op.animation != '' %}
    pl.col('{{op.animation.attribute}}'),
    {%- endif %}

    {%- if type in ('scatter', 'bubble', 'pointcloud') %}
    {%- if op.color_attribute and op.color_attribute.attribute%}
    pl.col('{{op.color_attribute.attribute}}'),
    {%- endif %}

    {%- if op.size_attribute and op.size_attribute.attribute%}
    pl.col('{{op.size_attribute.attribute}}'),
    {%- endif %}
    {%- endif %}
]
df = df.groupby(dimensions).agg(aggregations)
{%- else %}
# Test, not working!
dimensions = [
    {%- for x in x_values %}
    pl.col('dim_{{loop.index0}}'), 
    {%- endfor %}
    
    {%- if op.color_attribute and op.color_attribute.attribute %}
    pl.col('{{op.color_attribute.attribute}}'), # color
    {%- endif %}
    {%- if op.size_attribute and op.size_attribute.attribute %}
    pl.col('{{op.size_attribute.attribute}}'), # size
    {%- endif %}

];
df = df.select(select + dimensions)
{%- endif %}
{%- endmacro %}

{%- macro fix_missing_in_serie(op) %} 
# Fill the missing values. Otherwise, series may be wrongly 
# sorted in the x-axis (if a new x-value is discovered after 
# a previous serie is plot.
# For example, for the first serie, there is no ('v1', 'a1') value,
# but for there is a value for the second serie. The value 'a1'
# would be displayed after values found in the first serie, 
# causing x-axis to become wrongly sorted.
tmp_df = (df.select('dim_0')
            .unique()
            .join(df.select('dim_1').unique(), how='cross')
        )
df = df.join(tmp_df, on=['dim_0', 'dim_1'], how='outer').sort(
    ['dim_0', 'dim_1']).fill_null(0)
{%- endmacro %}

{%- macro fix_zeroes_in_treemap(op) %}
# Remove 0's because they cause ZeroDivisionError
df = df.filter(pl.col('aggr_0') != 0)
df = df.with_columns([
    {%- for y in op.y[:op.y_limit] %}
    pl.col('aggr_{{loop.index0}}').cast(pl.Float64),
    {%- endfor %}
])
{%- endmacro %}

{%- macro define_labels(op, x_values) %}
labels = {
    'variable': 'SÃ©rie',
    {%- for y in op.y[:op.y_limit] %}
    'aggr_{{loop.index0}}':
    {%- if y.label -%}
    '{{y.label}}',
    {%- else -%}
    '{{op.AGGR.get(y.aggregation, y.aggregation.lower()) -}}
        ({{y.attribute}})',
    {%- endif %}
    {%- endfor -%}
    {%- for x in x_values -%}
        'dim_{{loop.index0}}': '{{x.displayLabel or x.attribute}}', {%- endfor %}
}
{%- endmacro %}

{%- macro handle_sort(op, x_values) %}
df = df.sort(
    by=[
    {%- for x in x_values -%}
	{%- if x.sorting in ('Y_ASC', 'Y_DESC') -%}
	'aggr_0',
	{%- else -%}
	'dim_{{loop.index0}}', 
	{%- endif %}
	{%- endfor %}],
    descending=[
    {%- for x in x_values -%}
	{{ x.sorting == 'Y_DESC'}},
	{%- endfor %}])

{%- endmacro %}

{%- macro prepare_group_others(op, x_values, y_values) %}
{%- set y = y_values[0] %}
{%- for x in x_values %}
{%- if x.max_displayed %}
# Limit the number of items to be displayed
# Compute the top {{x.max_displayed}} item(s)

top_x_{{loop.index0}} = (df.groupby('{{x.attribute}}')
	.agg(pl.{{op.AGGR.get(y.aggregation, y.aggregation.lower()) -}}('{{y.attribute}}'))
	.sort(by=[{% if x.sorting in ('Y_ASC', 'Y_DESC') %}'{{x.attribute}}'
		{%- else %}'{{y.attribute}}'
		{%- endif %}],  descending=[True])
	.unique(subset='{{x.attribute}}', maintain_order=True)
	.limit({{x.max_displayed}})
	.collect().get_column('{{x.attribute}}').to_list())
df = df.with_columns([
	pl.when(pl.col('{{x.attribute}}').is_in(top_x_0))
		.then(pl.col('{{x.attribute}}'))
		.otherwise(pl.lit('{{x.label_others or "others"}}')).alias('{{x.attribute}}')
])
{%- endif %}
{%- endfor %}
{%- endmacro %}

{#------- End Macros --------------#}

{%- set type = op.type.lower() %}
{%- set pie_family = type in ('pie', 'donut') %}
{%- set map_family = type in ('scattermapbox', ) %}

{%- if pie_family %}
{%- set x_values = op.x[:1] %}
{%- else %}
{%- set x_values = op.x %}
{%- endif %}

df = {{input}}.clone()
{{ prepare_group_others(op, x_values, op.y) }}

{{ define_colors(op) }}

{%- if map_family %}
{%- elif type == 'indicator' %}
df = df.select(aggregations)
{%- else %}
{{ prepare_x_axis(x_values) }}
{{ prepare_aggregations(op) }}
{%- endif %}

{%- if op.limit %}
df = df.limit({{op.limit}})
{%- endif %}

{%- if x_values|length > 1 and type != 'treemap'%}
{{fix_missing_in_serie(op) }}
{%- endif %}

{%- if type == 'treemap' %}
{{ fix_zeroes_in_treemap(op) }}
{%- endif %}

{{ handle_sort(op, x_values) }}

pandas_df = df.collect().to_pandas()
{%- if not map_family %}
{{ define_labels(op, x_values) }}
{%- endif %}


#  Chart definition
{%- if type in ('line', 'filled-area', 'stacked-filled-area',
    'bar', 'stacked-bar', 'horizontal-bar',
    'stacked-horizontal-bar', 'scatter', 'bubble', 'pointcloud') %}

{%- if x_values|length == 1 or type.endswith('bar')%}
axis1 = 'dim_0'
{%- else %}
axis1 = [{% for x in x_values %}'dim_{{loop.index0}}',{% endfor%}]
{%- endif %}

{%- if op.y_limit == 1 and op.aggregations %}
axis2 = 'aggr_0'
{%- elif op.y_limit == 1 and op.literal%}
axis2 = '{{op.literal[0].attribute}}'
{%- else %}
axis2 = [
      {%- for y in op.y[:op.y_limit] -%}
        'aggr_{{loop.index0}}',
      {%- endfor -%}
      ]
{%- endif %}

fig = px.
    {%- if type in ('stacked-filled-area', 'filled-area') -%}
    area
    {%- elif type in ('stacked-bar', 'stacked-horizontal-bar', 'horizontal-bar') -%}
    bar
    {%- elif type in ('bubble', ) -%}
    scatter 
    {%- else %}{{type}}{% endif -%}(
        pandas_df,
        {%- if 'horizontal' in type %}
        # Invert axis values
        x=axis2,
        y=axis1,    
        {%- else %}
        x=axis1,
        y=axis2,    
        {%- endif %}
        {%- if x_values|length > 1 and type in ('bar', ) and False-%}
        color='dim_1', 
        pattern_shape="dim_1", 
        template="simple_white",
        {%- elif x_values|length > 1 and type not in ('scatter', 'bubble', 'bar', 'pointcloud') and not type.endswith('bar')-%}
        line_group='dim_1', color='dim_1',
        {%- elif x_values|length > 1 and type not in ('scatter', 'bubble', 'pointcloud') -%}
        color='dim_1',{% endif %}
        log_y={{op.y_axis.logScale}},

        {%- if op.blackWhite %}
        # Remove white color (last one generated)
        color_discrete_sequence=n_colors(
            'rgb(0, 0, 0)', 'rgb(255, 255, 255)', pandas_df.shape[1] + 1, colortype='rgb')[:-1],
        {%- else %}
        color_discrete_sequence=colors,
        {%- endif %}
        {%- if op.title %}title='{{op.title}}',{% endif %}
        {%- if type in ('bar', 'horizontal-bar') %}barmode='group',{% endif %}
        {%- if type in ('stacked-bar', 'stacked-horizontal-bar') %}barmode='stack',{% endif %}
        {%- if type in ('stacked-horizontal-bar', 'horizontal-bar') %}orientation='h',{% endif %}
        {%- if type in ('filled-area', 'stacked-filled-area') %}orientation='v',{% endif %}
        {%- if type in ('stacked-filled-area', ) %}groupnorm='percent',{% endif %}

        {%- if type in ('scatter', 'bubble')%}
        {%- if  op.color_attribute and op.color_attribute.attribute %}
        color='{{op.color_attribute.attribute}}',
        {%- endif %}
        {%- if  op.size_attribute and op.size_attribute.attribute%}
        size='{{op.size_attribute.attribute}}',
        {%- endif %}
        {%- endif %}
        labels=labels,
        {%- if type == 'line' and op.smoothing %}
        # https://github.com/plotly/plotly.py/issues/2812
        render_mode='svg',
        {%- endif %}

        {%- if op.subgraph and op.subgraph != '' %}
        facet_{{'row' if op.subgraph_orientation == 'v' else 'col'}}='{{op.subgraph.attribute}}',
        facet_col_wrap=4,
        {%- endif %}

        {%- if op.animation and op.animation != '' %}
        animation_frame='{{op.animation.attribute}}',
        animation_group='{{op.animation.attribute}}',
        {%- endif %}
        {%- if op.width %}width={{op.width}},{% endif %}
        {%- if op.height %}height={{op.height}},{% endif %}
)
fig.update_layout(xaxis_categoryorder='total ascending')
fig.for_each_trace(lambda t: t.update(name = labels.get(t.name, t.name)))
{%- if op.x_axis.label %}
fig.update_layout(
     xaxis_title='{{op.x_axis.label}}',
)
{%- endif %}
fig.update_yaxes(
    {%- if op.y_axis.label %}title='{{op.y_axis.label}}',{% endif %}
    showgrid=True,
    gridcolor="rgba(255,0,0,.10)",
    visible={{op.y_axis.display}}, tickformat=
        {%- if type == 'stacked-filled-area' %}None{% else %}'.3f'{% endif %},
        {%- if op.y_axis.prefix %}tickprefix='{{op.y_axis.prefix}}',{% endif %}
        {%- if op.y_axis.suffix %}
        ticksuffix=
        {%- if type == 'stacked-filled-area' %}'%'{% else %}'{{op.y_axis.suffix}}'{% endif %},
        {%- endif %}
        #showtickprefix="first",
        #showticksuffix="last"
)
{%- if op.smoothing and type == 'line' %}
fig.update_traces(line={'shape': 'spline', 'smoothing': 0.4})
{%- endif %}

{%- if type == 'line' %}
sizes = [{% for y in op.y -%}
    {%- if y.strokeSize -%}
    {{y.strokeSize}},
    {%- else %}
    1,
    {%- endif %}
    {%- endfor %}]

styles = [{% for y in op.y -%}
    {%- if y.stroke -%}
    '{{y.stroke}}',
    {%- else %}
    'solid',
    {%- endif %}
    {%- endfor %}]
{%- if x_values |length > 1 %}
sizes = sizes * {{x_values |length}}
styles = styles * {{x_values |length}}
{%- endif %}

for s, z, style in zip(fig.data, sizes, styles):
    s.line['dash'] = style
    s.line['width'] = z
    #s.marker.symbol = next(markers)
    # s.marker.size = z
{%- endif %}

{%- elif pie_family %}
fig = px.pie(pandas_df, values='aggr_0',
    names='dim_0',
    {%- if op.blackWhite %}
    color_discrete_sequence=n_colors(
        'rgb(0, 0, 0)', 'rgb(255, 255, 255)', pandas_df.shape[0] + 1, colortype='rgb'),
    {%- elif op.palette %}
    color_discrete_sequence=colors,
    {%- endif %}
    {%- if op.title %}
    title='{{op.title}}',
    {%- endif %}
    {%- if type == 'donut' %}hole={{op.hole * 0.01}},{% endif %}
    labels=labels,
    {%- if op.subgraph and op.subgraph != '' %}
    facet_{{'row' if op.subgraph_orientation == 'v' else 'col'}}='{{op.subgraph.attribute}}',
    facet_col_wrap=4,
    {%- endif %}
    {%- if op.width %}width={{op.width}},{% endif %}
    {%- if op.height %}height={{op.height}},{% endif %}
)
fig.update_layout(extendpiecolors=True)
# fig.update_traces(pull=0.1)
{%-if op.text_position or op.text_info or op.y[0].strokeSize %}
fig.update_traces(
    {%- if op.text_position %}textposition='{{op.text_position}}',
    {%- endif %}
    {%- if op.text_info %}textinfo='{{op.text_info}}',{% endif %}
    {%- if op.y[0].strokeSize %}marker=dict(
        line=dict(color='{{op.y[0].line_color or "#000000"}}', width={{op.y[0].strokeSize}}, )),{% endif %}
    {#pull=[0.01] * {{op.y |length}}, -#}
)
{%- endif %}

{%- elif type in ('boxplot',) %}
fig = px.box(pandas_df, 
             x='dim_0', 
             y='aggr_0',
             points="all",
             #marker_color='{{op.palette}}'
             #opacity = {{op.opacity}},
             color='dim_0',
             title='{{op.title}}',
             labels=labels,

)

fig.update_traces(quartilemethod="exclusive") 


{%- elif type in ('scattergeo',) %}
fig = px.scatter_geo(pandas_df,locations='dim_0',color='aggr_0',
                     hover_name='dim_1', size='aggr_0',
                     projection="natural earth",
                     color_continuous_scale={{op.color_scale}},
                     labels=labels,)

fig.update_layout(
        title_text = '{{op.title}}',
        #opacity = {{op.opacity}},
        showlegend = True,
    )



{%- elif type in ('pointcloud',) %}

fig = go.Figure(data=go.Scatter3d(
    x=pandas_df['dim_0'],
    y=pandas_df['dim_1'],
    z=pandas_df['aggr_0'],
    mode='markers',
    marker=dict(
        size=10,
        color=pandas_df['aggr_0'],
        colorscale='Viridis',
        opacity=0.8,
    ),
    hovertemplate='X: %{x}<br>Y: %{y}<br>Z: %{z}',
    
))

fig.update_layout(
    scene=dict(
        xaxis_title='X',
        yaxis_title='Y',
        zaxis_title='Z',
    ),
    title='{{op.title}}',
)

{%- elif type in ('scatterplot',) %}
fig = px.scatter(df, x='dim_0', y='aggr_0', color='aggr_1', symbol='aggr_1')



{%- elif type in ('histogram2d',) %}
fig = px.density_heatmap(pandas_df, 
      x='dim_0', 
      y='aggr_0', 
      marginal_x="box", 
      marginal_y="violin",
      #name='{{op.title}}',
      title='{{op.title}}',
      labels=labels,
      color_continuous_scale={{op.color_scale}},
      )


{%- elif type in ('funnel',) %}
data = dict(
    number=pandas_df['aggr_0'],
    stage=sorted(pandas_df['dim_0'],reverse=False),
    opacity = {{op.opacity}},
    textinfo = "value+percent initial")
fig = px.funnel(data, x='number', y='stage')

{%- elif type in ('violin',) %}
fig = px.violin(pandas_df,
    #eixos trocados
    y='aggr_0', 
    x='dim_0',
    color='dim_0', 
    box=True, 
    points="all",
    hover_data=pandas_df.columns,
    title='{{op.title}}',
    labels=labels,
)

{%- elif type in ('parcoords',) %}
fig = px.parallel_coordinates(pandas_df, 
      color='dim_0', 
      labels=labels,
      dimensions=['aggr_0','aggr_1','aggr_2','aggr_3'],
      color_continuous_scale={{op.color_scale}},
      title='{{op.title}}',
      color_continuous_midpoint=2
)

{%- elif type in ('histogram2dcontour',) %}
fig = px.density_contour(pandas_df,
    x='dim_0', 
    y='aggr_0',
    title='{{op.title}}',
    labels=labels,
    )
fig.update_traces(contours_coloring="fill",
    #colorscale = {{op.palette}},
    colorscale = {{op.color_scale}},
    contours_showlabels = True)

{%- elif  type in ('treemap', 'sunburst') %}
fig = px.{{type}}(
    pandas_df, 
    path=[{% for x in x_values %}'dim_{{loop.index0}}', {% endfor %}],
    values='aggr_0',
    color='aggr_0',
    {%- if op.color_scale %}color_continuous_scale={{op.color_scale}},{% endif %}
    # color_discrete_sequence ={{op.palette}},
    title='{{op.title}}',
    labels=labels,
)

fig.update_layout(margin = dict(t=50, l=25, r=25, b=25))


{%- elif type in ('indicator', ) %}
fig = go.Figure(go.Indicator(
    mode = "number",
    value = pandas_df.iloc[0][0],
    # title='{{op.title}}',
    # domain = {'x': [0, 1], 'y': [0, 1]}
))
{%- elif map_family %}
fig = px.scatter_mapbox(
	pandas_df, lat='latitude', lon='longitude',
	mapbox_style='{{op.style or 'open-street-map'}}',
    {%- if op.height %}height={{op.height}},{% endif %}
    {%- if op.center_latitude or op.center_longitude %}
		center={'lat': {{op.center_latitude or 'None'}}, 
			'lon': {{op.center_longitude or 'None'}}}, 
	{%- endif %}
	{%- if op.zoom %}zoom={{op.zoom}},{% endif %}
	{%- if op.title %}title='{{op.title}}',{% endif %}
	{%- if op.text_attribute %}text='{{op.text_attribute}}',{% endif %}
	{%- if op.color_attribute %}color='{{op.color_attribute}}',{% endif %}
	{%- if op.size_attribute %}size='{{op.size_attribute}}',{% endif %}
)
fig.update_traces(
	{%- if op.marker_size %}marker_sizeref={{op.marker_size}},{% endif %}
	{%- if op.text_info %}mode='{{op.text_info}}',{% endif %}
	{%- if op.tooltip_info %}hoverinfo='{{op.tooltip_info}}',{% endif %}
)
fig.update_layout(autosize=True, showlegend=True)

{%- endif %}

{%- if op.blackWhite and (type.endswith('bar')) %}
#fig.update_traces(
#    marker=dict(color="black", line_color="black", pattern_fillmode="replace"))
{%- endif %}

{%- if op.opacity is not none and op.opacity >=0 and op.opacity != 1 %}
fig.update_traces(opacity={{op.opacity}})
{%- endif %} 

# Legend and separators.
fig.update_layout(
	{%- if op.number_format %}separators='{{op.number_format}}',{% endif %}
    {%-if op.display_legend == 'HIDE' %}
    showlegend=False,
    {%- elif op.display_legend != 'AUTO' %}
    showlegend=True,
    legend=dict(
        title='Legenda',
        orientation="{%if 'CENTER' in op.display_legend %}h{%else%}v{%endif%}",
        yanchor="{% if 'BOTTOM' in op.display_legend %}bottom
        {%- else %}top{% endif %}",
        y={% if 'BOTTOM' in op.display_legend %}-.30
        {%- else %}.99{% endif %},
        xanchor="{{op.display_legend.lower().replace('bottom_', '')}}",
        x={% if 'CENTER' in op.display_legend %}0.5,
        {%- elif 'LEFT' in op.display_legend %}.1,
        {%- else %}.99,{% endif %}
    ),
    {%- elif 0 %}
    legend=dict(
        borderwidth=1,
        bordercolor='#222',
    ),
    {%- endif %}
)

{%- if (op.custom_colors) and (not pie_family) and (not map_family) %}
{%- for inx, c in op.custom_colors %}
{%- if c %}
fig.update_traces(dict(
    {%- if type.endswith('bar') %}marker{% else %}line{% endif -%}
    ={'color': '{{c}}'}), {{inx}})
{%- endif %}
{%- endfor %}
{%- endif %}

{%- if op.shapes and type not in ('line',) and not pie_family and not map_family  %}
# Shapes {{op.shapes}}
{%- for inx, c in op.shapes %}
fig.update_traces(dict(
    {%- if type.endswith('bar') %}marker{% else %}line{% endif -%}
    ={'pattern': {'shape': '{{c or ''}}'}}), {{inx}})
{%- endfor %}
{%- endif %}

{%- if op.template_ and op.template != 'none' %}
# Template/theme
fig.update_layout(template='{{op.template_}}')
{%- endif %}

# fig.update_traces(marker={'line': {'color': colors, 'width': 5}, 'pattern': {'shape': '.', 'fillmode':'replace' }})

{%- if not op.fill_opacity is none %}
# Fill transparency
{%- if not pie_family and not map_family and op.palette %}
cycle = itertools.cycle(transparent_colors)
fig.for_each_trace(
    lambda trace: 
        trace.update(
            marker={
                'line': {'color': trace.marker.color, 'width': 1.5}, 
                #'pattern': {'shape': '\\', 'fillmode': 'replace'},
                'color': next(cycle),
            }
        )
)
{%- elif pie_family %}
fig.update_traces(marker=dict(colors=transparent_colors))
{%- endif %}
{%- endif %}
# Tooltip
expr_agg = re.compile(r'aggr_\d+')
fig.for_each_trace(
    lambda trace: 
        trace.update(hovertemplate=expr_agg.sub(trace.name, trace.hovertemplate))
)
{%- if not map_family and op.y[0].decimal_places is not none and op.y[0].decimal_places != ''%}
# Rouding 
{%- if pie_family and op.text_info %}
fig.update_traces(
    texttemplate='
    {%- if 'label' in op.text_info %}%{label}<br>{% endif %} 
    {%- if 'value' in op.text_info %}%{value:.{{op.y[0].decimal_places}}f}<br>{% endif %} 
    {%- if 'percent' in op.text_info %}%{percent:.{{2 + op.y[0].decimal_places}}p}{% endif -%} 
    '
)
{%- elif pie_family and op.text_info %}-
fig.update_traces(textinfo='{{op.text_info}}')
{%- endif %}
# fig.update_traces(texttemplate='%{value:.6f}')
{%- endif %}

# Margins
{%- if op.auto_margin %}
fig.update_yaxes(automargin=True)
fig.update_xaxes(automargin=True)
{%- else %}
fig.update_layout(
    margin=dict(
        l={{op.left_margin}}, r={{op.right_margin}}, 
        t={{op.top_margin}}, b={{op.bottom_margin}})
)
{%- endif %}

# Sorting follow the one defined for the input data
fig.update_xaxes(categoryorder='trace')

{%- if op.animation and type not in ('pie', 'donut') %}
# Animation configuration
fig.update_layout(transition = {'duration': 1000})
fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 1000
{%- endif %}

d = json.loads(fig.to_json())
# del d.get('layout')['template']
emit_event(
    'update task', status='COMPLETED',
    identifier='{{op.task_id}}',
    message=d,
    type='PLOTLY', title='',
    task={'id': '{{op.task_id}}'},
)

{{out}} = None

