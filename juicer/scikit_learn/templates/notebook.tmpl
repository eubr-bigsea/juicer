{
  {%- set all_tasks = [] %}
  {%- for instance in instances %}
  {%- if instance.has_code and instance.enabled %}
  {%- if instance.set_plain(True) %}{% endif %}
  {%- do all_tasks.append(instance) %}
  {%- endif %}
  {%- endfor %}
  "cells" : [
    {
      "cell_type" : "markdown",
      "metadata": {},
      "source" : [
        "<img src=\"https://dev.ctweb.inweb.org.br/lemonade_logo.svg\" title=\"Lemonade\" alt=\"Lemonade\" style=\"width:200px; height: auto; margin:0\"/>\n\n",
        "# {{workflow_name}}\n",
        "Created by {{user.name}}. Code generated at {{ now.strftime('%Y/%m/%m %H:%M:%S') }}.\n",
        "\n",
        "This code was generated by [Lemonade](http://www.lemonade.org.br), a tool for design data processing and machine learning workflows.\n",
        "Targeting platform is: \n",
        "- [Scikit Learn](http://scikit-learn.org/stable/);\n",
        "- [Pandas](https://pandas.pydata.org/);\n",
        "- [Matplotlib](https://matplotlib.org/).\n\n",
        "In order to be able to run this notebook, you must:\n",
        "1. Create a Python virtual environment;\n",
        "2. Install all dependencies for Lemonade;\n",
        "3. Configure connection parameters for HDFS (if using it);\n",
        "4. Review the code and make any necessary adjust.\n",
        "\n",

        "## Installing dependencies\n",
        "Lemonade requires Python 3.7. Dependencies can be installed by using the command `pip`. If you do not know how to use id, check ...\n",
        "\n",
        "\n",
        "`pip install pandas scikit-learn seaborn scipy matplotlib`\n",

        "\n",
        "## Jupyter setup \n",
        "If you are using a Python virtual environment (recommended), install and configure a kernel:",
        "\n\n```\n",
        "$ pip install ipykernel\n",
        "$ ipython kernel install --user --name=lemonade\n",
        "$ jupyter notebook\n",
        "```\n\n",
        "**Do not** forget to change the kernel to the new one (`lemonade`) in Jupyter \n",
        "## tl;dr\n",
        "\n```\n",
        "$ python -m venv lemonade\n",
        "$ source lemonade/bin/activate\n",
        "(venv) $ pip install pandas scikit-learn seaborn scipy matplotlib\n",
        "(venv) $ pip install ipykernel\n",
        "(venv) $ ipython kernel install --user --name=lemonade\n",
        "(venv) $ jupyter notebook\n",
        "```\n\n"

      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
        "metadata": {
          "collapsed": true
        },
        "source": [
            "# Not all imports are really necessary, remove them accordingly.\n",
            "import datetime\n",
            "import decimal\n",
            "import os\n",
            "import re\n",
            "import json\n",
            "import simplejson\n",
            "import string\n",
            "import sys\n",
            "import time\n",
            "import unicodedata\n",
            "import numpy as np\n",
            "import pandas as pd\n",
            "from IPython.display import display, HTML\n",
            "import traceback\n"
        ],
        "outputs": []
    },
    {

      "cell_type" : "markdown",
      "metadata": {},
      "source" : [
        "## Imports and general functions\n",
        "Add and/or edit imports and functions used in workflow.\n"
        ]
    },
    {
          "cell_type": "code",
          "execution_count": null,
          "metadata": {
            "collapsed": true
          },
          "source": [
            {%- if transpiler.imports %}
            "# Imports for workflow tasks\n",
            {%- for imps in transpiler.imports %}
            "{{imps}}\n",
            {%- endfor %}
            {% endif %}

            "# General functions\n",
            "def emit(df, n=20):\n",
            "    \"\"\"\n",
            "    Print first n records from DataFrame\n",
            "    \"\"\"\n",
            "    print(df.head(n))\n",
            "\n",
            "def emit_schema(df):\n",
            "    \"\"\"\n",
            "    Print a concise summary of a DataFrame.\n",
            "    \"\"\"\n",
            "    df.info(verbose=True)\n",
            "\n",
            {%- if transpiler.custom_functions %}
            {%- for code in transpiler.custom_functions.values() %}
            {%- for line in code.split('\n') %}
            "{{line.replace('"', '\\"') }}\n",
            {%- endfor -%}
            {%- endfor -%}
            {%- endif %}
            "\n"
          ],
          "outputs": []
    },
    {

      "cell_type" : "markdown",
      "metadata": {},
      "source" : [
        "# Workflow generated code\n",
        "Tasks are topologically sorted and their code is printed in cells below.\n",
        "Some operations may not be supported yet."
        ]
    }
    {%-if all_tasks|length %},{% endif %}
    {%- for instance in all_tasks %}
    {%- set task = instance.parameters.task %}
    {%- set task_id = task.id %}
    {
      "cell_type" : "code",
      "execution_count": null,
      "metadata" : {
            "collapsed" : true
      },
      "source" : [
        {%- if task.forms.comment and task.forms.comment.value %}
        {%- for comment in task.forms.comment and task.forms.comment.value.split('\n') %}
        {{('# ' + comment.replace('"', '') ) |tojson }},
        "\n",
        {%- endfor %}
        {%- endif %}
        "# {{task.operation.name}}\n",
        "# task_id = '{{task_id}}'\n",
        {%- for line in instance.generate_code().strip().split('\n') %}
        {{(line + "\n") | tojson}},
        {%- endfor %}
        {%- if instance.contains_results() %}
            {%- for out in instance.get_output_names(',').split(',') %}
            {%- if instance.has_code and instance.enabled %}
            {%- if instance.contains_sample %}
            "emit({{out}})\n",
            {%- endif%}
            {%- if instance.contains_schema %}
            "emit_schema({{out}})\n",
            {%- endif%}
            {%- endif%}
            {%- endfor %}
        {%- endif %}
        "\n"
      ],
      "outputs": []
    }{%-if not loop.last%},{% endif %}
    {%- endfor %}
  ],
  "metadata": {
       "kernelspec": {
         "display_name": "lemonade",
          "language": "python",
          "name": "lemonade"
      },
      "language_info": {
        "codemirror_mode": {
          "name": "ipython",
          "version": 3
        },
        "file_extension": ".py",
        "mimetype": "text/x-python",
        "name": "python",
        "nbconvert_exporter": "python",
        "pygments_lexer": "ipython2",
        "version": "3.7"
      }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}
