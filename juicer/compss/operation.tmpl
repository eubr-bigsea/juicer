#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Auto-generated COMPSs code from Lemonade Workflow
# (c) Speed Labs - Departamento de Ciência da Computação
#     Universidade Federal de Minas Gerais
# More information about Lemonade to be provided
#
import json
import os
import re
import string
import sys
import time
import unicodedata
import csv

from timeit import default_timer as timer
from pycompss.api.task          import task
from pycompss.api.parameter     import *
from pycompss.functions.reduce  import mergeReduce

{% autopep8 %}
{% set list_imports = [] %}
{% for instance in instances %}
{% if instance.has_import and  instance.has_import not in list_imports %}
{% set _ = list_imports.append(instance.has_import) %}
{% endif %}
{% endfor %}

{% for imps in list_imports %}
{{imps}}
{% endfor %}


reload(sys)
sys.setdefaultencoding('utf8')


{%- for instance in instances %}
{%- if instance.has_code %}
def {{instance.parameters.task.operation.slug.replace('-', '_')}}_gen_{{instance.get_output_names('_')}}(
        {%- if instance.get_inputs_names %} {{instance.get_inputs_names}}{% endif %}):
    {%- if instance.parameters.task.forms.comment %}
    """
    {{instance.parameters.task.forms.comment.value.replace('"', '')}}
    """
    {%- endif %}
    start = timer()
    {{instance.generate_code() | indent(width=4, indentfirst=False)}}
    {%- if instance.parameters.get('logging', {}).get('log_level') == 'DEBUG' %}
    {%- set out = instance.get_data_out_names('|') %}
    {%- if out %}
    {%- for variable in out.split('|')%}
    juicer_debug('{{instance.__class__}}', '{{variable}}', {{variable}})
    {%- endfor %}
    {%- endif %}
    {%- endif %}

    time_elapsed = timer() - start
    return {% if instance.get_output_names() %} {{instance.get_output_names()}}, {% endif %}time_elapsed

{%- endif %}
{% endfor %}

def main():
    start = time.time()
    app_name = u'## {{workflow_name}} ##'
    print app_name

    # Declares and initializes variables in order to do not generate NameError.
    # Some tasks may not generate code, but at least one of their outputs is
    # connected to a valid input in a task generating code. This happens when
    # task has a port with multiplicity MANY
    {%- for instance in instances %}
    {%- if instance.has_code %}
    {%- if instance.multiple_inputs %}
    {{instance.get_inputs_names.replace(',', '=') }} = None
    {% endif %}
    {%- endif %}
    {%- endfor %}

    {%- for instance in instances %}
    {%- set is_satisfied = dependency_controller.is_satisfied(instance.parameters.task.id) %}
    {%- if instance.has_code and is_satisfied %}
    {%- set s = dependency_controller.satisfied(instance.parameters.task.id) %}
    {%- if is_satisfied %}
    {% if instance.get_output_names(", ") %}{{instance.get_output_names(", ")}}, {% endif %}ts_{{instance.output}} = {{instance.parameters.task.operation.slug.replace('-', '_')}}_gen_{{instance.get_output_names('_')}}(
        {%- if instance.get_inputs_names %} {{instance.get_inputs_names}}{% endif %})
    {%- endif %}
    {%- else %}
    # Task **{{instance.parameters.task.operation.name}}** did not genarate code
    {%- endif %}
    {%- endfor %}

    end = time.time()
    print "%.2f seconds" % (end-start)
    return {
        'status': 'OK',
        'message': 'Execution defined',
        {%- for instance in instances %}
         {%- set is_satisfied = dependency_controller.is_satisfied(instance.parameters.task.id) %}
         {%- if instance.has_code and is_satisfied %}
        '{{instance.parameters.task.id}}': ({%- if instance.get_output_names() %}
        {%- for variable in instance.get_output_names(', ').split('|') -%}
        {{variable}},
        {%- endfor -%}{% endif -%}
        ts_{{instance.output}}),
        {%- endif %}
        {%- endfor %}
    }
{%- if execute_main %}
main()

{%- endif %}
{% endautopep8 %}

if __name__ == "__main__":
    main()

#end

